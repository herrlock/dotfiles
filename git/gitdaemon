#!/bin/bash

echo -e '\033]2;gitdaemon\007';

# variables
print_help=false
parallel_fetch=3
run_times=0
gc_max=0

number_regex='^[0-9]+$'
while (( $# > 0 )); do
	case "$1" in
		-p)
			if [[ "$2" =~ $number_regex ]]; then
				parallel_fetch="$2"
			fi
			shift
			;;
		-g)
			if [[ "$2" =~ $number_regex ]]; then
				gc_max="$2"
			fi
			shift
			;;
		-n)
			if [[ "$2" =~ $number_regex ]]; then
				run_times="$2"
			fi
			shift
			;;
		-h|--help)
			print_help=true
			break # stop looping, we only print the help
			;;
	esac
	shift
done

if [[ $print_help == 'true' ]]; then
	printf 'Usage:'; echo
	printf 'gitdaemon [-p parallel count] [-g gc-count] [-h|--help]'; echo; echo
	_format="%2s, %8s : %s"
	printf -- "$_format" -p '' 'The amount of parallel fetch-processes. Defaults to 3'; echo
	printf -- "$_format" -g '' 'The number of fetches before git gc is called. 0 (default) disables this.'; echo
	printf -- "$_format" -n '' 'The number of times this script runs. 0 (default) runs forever'; echo
	printf -- "$_format" -h --help 'Print this help'; echo
	exit
fi

export parallel_fetch
export run_times
export gc_max

gc_cnt=1

# all folders containing git-repos
gitfolders=$($(dirname $0)/gitfolders)

# fetch updates from all remotes
function fetch {
	if [ $0 ]; then (
		cd "$0"
		if [[ $parallel_fetch == 1 ]]; then
			echo
			printf "%b%s%b\n" "$COL_YELLOW" "$(pwd -W)" "$COL_RESET"
		fi
		# update
		git fetch --all --prune --tags
		# run git svn fetch is repo is git-svn
		if [ -d .git/svn ]; then
			git svn fetch
		fi
	); fi
}
export -f fetch

# list branches
function branch {
	if [ $0 ]; then (
		cd "$0"
		pwd -W
		# list branch-stats, only show lines that contain a colon (probably a branch that is not up to date)
		git branch -vv | grep --color=auto "\[.*:.*\]"
	); fi
}
export -f branch

# run git gc
function gc {
	if [ $0 ]; then (
		cd "$0"
		pwd
		yes n | git gc
	); fi
}
export -f gc

cnt=0
# loop until SIGINT (Ctrl-C)
while (( run_times == 0 || cnt < run_times )); do

	((cnt++))
	printf "%b%s%b\n" "$COL_YELLOW" "Run number $cnt" "$COL_RESET"

	# run git gc every n-th time (once per hour)
	if [[ $gc_max > 0 ]]; then
		if [[ $gc_cnt -eq $gc_max ]]; then
			echo GC:
			echo $gitfolders | xargs -r -n 1 bash -c gc
			gc_cnt=1
		else
			gc_cnt=$(($gc_cnt + 1))
		fi
	fi

	# fetch each gitfolder in background-tasks
	echo
	echo Fetch:
	echo $gitfolders | xargs -r -n 1 -P $parallel_fetch bash -c fetch

	# print status for each gitfolder
	echo
	echo Branches:
	echo $gitfolders | xargs -r -n 1 bash -c branch

	# print date
	printf "%b%s%b\n" "$COL_YELLOW" "$(date)" "$COL_RESET"

	if (( run_times != 0 && cnt >= run_times )); then
		break
	fi

	# print dot ten times, wait a total of 600 seconds
	for i in {1..10}; do
		# echo a dot
		echo -n .
		# wait 60 seconds
		sleep 60
	done

	echo

done
